/*
    Data Structures Homework 2, part 1. Develop a program which will allow you 
to read the student records from an input .txt file. As you read watch student 
record, create an object for that record. Have your object calculate the 
percentage test score (you may assume that each test was 100 points). Have your
object store the %score and letter grade for each student (use school standards
to assign the letter grades and store the %score as an integer).
   Also create an ArrayList for this academic class. As you read each student 
record, create their object and store their object and store each student into
the ArrayList for this academic class.
*/
package ds_02_students;

import java.io.*;
import java.util.*;
import java.lang.*;
import javax.swing.*;

public class DS_02_Students {
    public static void main(String[] args) throws Exception {
        // 1)
        ArrayList<Student> Academic_Class = readIn();
        
        // 2)       
        System.out.println("Student ID\tStudent Name\tTest 1\tTest2\tTest3\tAvg Score\tGrade");
        for(int i = 0; i<Academic_Class.size(); i++){
            System.out.println(Academic_Class.get(i).getStuID()+"\t\t"+
                    Academic_Class.get(i).getStuName()+"\t"+
                    Academic_Class.get(i).getScore1()+"\t"+
                    Academic_Class.get(i).getScore2()+"\t"+
                    Academic_Class.get(i).getScore3()+"\t"+
                    Academic_Class.get(i).getScoreAvg()+"\t\t"+
                    Academic_Class.get(i).getLetterGrade());
        }
        System.out.println();
                
        // 3)
        DeleteStudent(Academic_Class, "42P4");
        DeleteStudent(Academic_Class, "45A3");
        
        // 4)
        System.out.println("Student ID\tStudent Name\tTest 1\tTest2\tTest3\tAvg Score\tGrade");
        for(int i = 0; i<Academic_Class.size(); i++){
            System.out.println(Academic_Class.get(i).getStuID()+"\t\t"+
                    Academic_Class.get(i).getStuName()+"\t"+
                    Academic_Class.get(i).getScore1()+"\t"+
                    Academic_Class.get(i).getScore2()+"\t"+
                    Academic_Class.get(i).getScore3()+"\t"+
                    Academic_Class.get(i).getScoreAvg()+"\t\t"+
                    Academic_Class.get(i).getLetterGrade());
        }
        System.out.println();
		
        // 5)
        AddStudent(Academic_Class, new Student("67T4", "Clouse, B", 80, 75, 98));
        AddStudent(Academic_Class, new Student("45P5", "Garrison, J", 75, 78, 72));
        AddStudent(Academic_Class, new Student("89P0", "Singer, A", 85, 89, 99));
        
        // 6)
        
        
        
        // 7)
        System.out.println("Student ID\tStudent Name\tTest 1\tTest2\tTest3\tAvg Score\tGrade");
        for(int i = 0; i<Academic_Class.size(); i++){
            System.out.println(Academic_Class.get(i).getStuID()+"\t\t"+
                    Academic_Class.get(i).getStuName()+"\t"+
                    Academic_Class.get(i).getScore1()+"\t"+
                    Academic_Class.get(i).getScore2()+"\t"+
                    Academic_Class.get(i).getScore3()+"\t"+
                    Academic_Class.get(i).getScoreAvg()+"\t\t"+
                    Academic_Class.get(i).getLetterGrade());
        }
    }//closes main
    
    //creates a method to read in from a tab delimited .txt and returns an ArrayList
    private static ArrayList<Student> readIn(){
        try{
            BufferedReader buffer = new BufferedReader(new FileReader("Students.txt"));
            //ArrayList<String> strings = new ArrayList<>();//used to hold ids, names, and scores
            ArrayList<Student> students = new ArrayList<>();
            String lineJustFetched; //will temporarily holds line being looked at
            String[] wordsArray; //will hold lineJustFetched after it has been split "\t"
            
            
            lineJustFetched = buffer.readLine();
            while(lineJustFetched != null){
                //split the line by "\t", create Students, and put into ArrayList
                wordsArray = lineJustFetched.split("\t");
                
                //creates temporary variables
                String ID = wordsArray[0];
                String Name = wordsArray[1];
                int score1 = (int) Double.parseDouble(wordsArray[2]);
                int score2 = (int) Double.parseDouble(wordsArray[3]);
                int score3 = (int) Double.parseDouble(wordsArray[4]);
                
                //create new student based on wordsArray at certain indexes
                students.add(new Student(ID, Name, score1, score2, score3));
                lineJustFetched = buffer.readLine();
            }//close while loop
            
            buffer.close();
            return students;
        }catch(Exception e){
            e.printStackTrace();
            return null;
        } 
    }
    
    //adds a student given student object to a given arraylist
    private static void AddStudent(ArrayList<Student> Academic_Class, Student Obj){
        Academic_Class.add(Obj);
    }   
    
    //deletes a student with given ID from the given arraylist
    private static void DeleteStudent(ArrayList<Student> Academic_Class, String StudentID){
        for(int i = 0; i<Academic_Class.size(); i++){
            if(Academic_Class.get(i).stuID.equals(StudentID)){
                Academic_Class.remove(i);
            }
        }
    }
    
    //sorts the arraylist by percentage (scoreAvg)
    public void SortLarge(ArrayList<Student> Academic_Class){
        
    }
}//end of class DS_02_Students





//creation of class Student
class Student implements Comparable{
    protected String stuID;
    protected String stuName;
    protected String letterGrade;
    protected int score1;
    protected int score2;
    protected int score3;
    protected int scoreAvg;
    //constructor for Student
    public Student (String ID, String Name, int s1, int s2, int s3){
        this.stuID = ID;
        this.stuName = Name;
        this.score1 = s1;
        this.score2 = s2;
        this.score3 = s3;
        this.scoreAvg = Math.round((score1+score2+score3)/3);
        if(scoreAvg >= 90 && scoreAvg <=100) letterGrade = "A";
        else if (scoreAvg >= 80 && scoreAvg <=89) letterGrade = "B";
        else if (scoreAvg >= 70 && scoreAvg <=79) letterGrade = "C";   
        else if (scoreAvg >= 60 && scoreAvg <=69) letterGrade = "D";
        else letterGrade = "F";
    }
    public String getStuID() {
        return stuID;
    }
    public String getStuName() {
        return stuName;
    }
    public String getLetterGrade() {
        return letterGrade;
    }
    
    public int getScore1() {
        return score1;
    }
    
    public int getScore2() {
        return score2;
    }
    
    public int getScore3() {
        return score3;
    }
    public int getScoreAvg() {
        return scoreAvg;
    }

    @Override
    public int compareTo(Object o) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
